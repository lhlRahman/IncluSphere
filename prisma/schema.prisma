generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique @db.VarChar(255)
  firstName String?  @db.VarChar(255)
  clerkId   String?  @unique @db.VarChar(255)
  lastName  String?  @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  resume    String?
  bio       String
  courses   Course[] @relation("UserCourse")
}

model Course {
  id          Int      @id @default(autoincrement())
  creatorId   Int
  title       String   @db.VarChar(255)
  description String?
  imageUrl    String?  @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  completed   Boolean  @default(false)
  creator     User     @relation("UserCourse", fields: [creatorId], references: [id], onDelete: Cascade)
  units       Unit[]   @relation("courseUnit")
}

model Unit {
  id          Int       @id @default(autoincrement())
  courseId    Int
  name        String
  description String?
  chapters    Chapter[] @relation("unitChapter")
  course      Course    @relation("courseUnit", fields: [courseId], references: [id])
}

model Chapter {
  id         Int        @id @default(autoincrement())
  unitId     Int
  name       String
  summary    String?
  videoId    String?
  duration   Int?
  videoQuery String?
  unit       Unit       @relation("unitChapter", fields: [unitId], references: [id])
  questions  Question[]
}

model Question {
  id        Int      @id @default(autoincrement())
  chapterId Int
  question  String
  answer    String
  options   String[]
  chapter   Chapter  @relation(fields: [chapterId], references: [id])
}
