generator client {
  provider = "prisma-client-js"
}
datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique @db.VarChar(255)
  firstName String?  @db.VarChar(255)
  clerkId   String?  @unique @db.VarChar(255)
  lastName  String?  @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  resume    String?  @db.Text
  bio       String   @db.Text
  courses   Course[] @relation("UserCourse")
}

model Course {
  id          Int      @id @default(autoincrement())
  creatorId   Int      
  title       String   @db.VarChar(255)
  description String?
  imageUrl    String?  @db.VarChar(255)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  completed   Boolean  @default(false)
  creator     User     @relation(name: "UserCourse", fields: [creatorId], references: [id], onDelete: Cascade)
  units       Unit[]   @relation(name:"courseUnit")
}

model Unit {
  id          Int       @id @default(autoincrement())
  courseId    Int
  name        String    @db.Text
  description String?   @db.Text // New field for a brief overview
  course      Course    @relation(name:"courseUnit", fields: [courseId], references: [id])
  chapters    Chapter[] @relation(name:"unitChapter")
}

model Chapter {
  id        Int      @id @default(autoincrement())
  unitId    Int
  name      String
  summary   String?  @db.Text
  videoQuery   String?  
  videoId   String?
  duration  Int?    // New field for video duration
  unit      Unit    @relation(name:"unitChapter", fields: [unitId], references: [id])
  questions Question[]
}

model Question {
  id              Int     @id @default(autoincrement())
  chapterId       Int
  question        String
  answer          String
  options         String[]
  chapter         Chapter @relation(fields: [chapterId], references: [id])
}
